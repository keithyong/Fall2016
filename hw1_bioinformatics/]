#!/usr/bin/perl

# Needleman-Wunsch command line 
# October 3, 2016
# Author: Keith Yong    keithy@udel.edu
# yongk_align [â€“o 1] <input_file>

use List::Util qw( max );
use Data::Dumper;

@s2 = split //, "CACGTACG";
@s1 = split //, "TAGGACATG";
$s1_len = $#s1 + 1;
$s2_len = $#s2 + 1;

$id_score = 4;              # AA/CC/GG/TT match
$transition_score = -2;     # AG or CT match
$transversion_score = -3;   # All others
$gap_score = -8;

# Command line
$PRINT_DP_MATRIX = 0;
if (scalar @ARGV eq 3 and $ARGV[0] eq "-o" and $ARGV[1] eq "1") {
    $PRINT_DP_MATRIX = 1;
    $filename = $ARGV[2];
} else { 
    $filename = $ARGV[0];
}

print "$filename\n";

sub read_fasta_file {
    # Initialize variables
    my @filedata = (  );

    unless( open(GET_FILE_DATA, $filename) ) {
        print STDERR "Cannot open file \"$filename\"\n\n";
        exit;
    }

    @filedata = <GET_FILE_DATA>;
    close GET_FILE_DATA;

    my $sequence = '';
    my @seqs;
    foreach my $line (@filedata) {
        if ($line =~ /^\s*$/) {
            next;
        } elsif($line =~ /^\s*#/) {
            next;
        } elsif($line =~ /^>/) {
            next;
        } else {
            push @seqs, $line;
        }
    }

    $sequence =~ s/\s//g;
    print "$sequence\n";

    return $sequence;
}

sub print_dp_matrix {
    printf "\t%5s\t", "-";
    for ($j = 0; $j < $s2_len; $j++) {
        printf "%5s\t", $s2[$j];
    }
    print "\n";

    for ($i = 0; $i <= $s1_len; $i++) {
        if ($i > 0) {
            printf "%5s\t", $s1[$i - 1];
        } else {
            printf "%5s\t", "-";
        }

        for ($j = 0; $j <= $s2_len; $j++) {
            printf "%5d\t", $M[$i][$j];
        }
        print "\n";
    }
}

sub S {
    my $a = shift;
    my $b = shift;
    my $ab = $a . $b;

    if ($a eq $b) {
        return $id_score;
    } 
    elsif (    $ab eq "GA" 
            or $ab eq "AG"
            or $ab eq "CT"
            or $ab eq "TC") {
        return $transition_score;
    } else {
        return $transversion_score;
    }
}

sub generate_dp_matrix() {
    for (my $i = 0; $i <= $s1_len; $i++) {
        $M[$i][0] = $gap_score * $i;
    }
    for (my $j = 0; $j <= $s2_len; $j++) {
        $M[0][$j] = $gap_score * $j;
    }

    for (my $i = 1; $i <= $s1_len; $i++) {
        for (my $j = 1; $j <= $s2_len; $j++) {
            my $ai = $s1[$i - 1];
            my $bj = $s2[$j - 1];
            $match = $M[$i - 1][$j - 1] + S($ai, $bj);
            $delete = $M[$i - 1][$j] + $gap_score;
            $insert = $M[$i][$j - 1] + $gap_score;
            $M[$i][$j] = max ($match, $delete, $insert);
        }
    }

    if ($PRINT_DP_MATRIX eq 1) {
        print_dp_matrix();
    }
}

# Generate alignment.
sub generate_alignment() {
    my $i = $s1_len;
    my $j = $s2_len;
    my $A = "";
    my $B = "";

    while ($i > 0 and $j > 0) {
        my $ai = $s1[$i - 1];
        my $bj = $s2[$j - 1];
        if ($i > 0 and $j > 0 and $M[$i][$j] eq ($M[$i - 1][$j - 1] + S($ai, $bj))) {
            $A = $ai . $A;
            $B = $bj . $B;
            $i--;
            $j--;
        } elsif ($i > 0 and $M[$i][$j] eq $M[$i - 1][$j] + $gap_score) {
            $A = $ai . $A;
            $B = "-" . $B;
            $i--;
        } else {
            $A = "-" . $A;
            $B = $bj . $B;
            $j--;
        }
    }

    print "$A\n";
    print "$B\n";
}

read_fasta_file($filename);
generate_dp_matrix();
generate_alignment();

